/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jamesrkiv.scheduleprog;
// Basic utilities/swing
import java.awt.*;
import java.util.*;
import javax.swing.*;
// For handling txt
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.*;

/**
 * @author james
 */
public class scheduleApp extends javax.swing.JFrame {
    
    // Global variables
    private int currentDay;                 // Current day of the week
    private Date selectedDate;              // Date from selected week
    private final Date today = new Date();  // Today's date
    static eventObject[] eventArray;        // Event array
    
    private final String def1 = "Enter your event here...";
    private final String def2 = "Event line two (optional)...";

    /**
     * Creates new form scheduleApp
     */
    public scheduleApp() {
        initComponents();
        eventArray = readFromFile();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        subOptions = new javax.swing.ButtonGroup();
        colorPickerGroup = new javax.swing.ButtonGroup();
        tueBack = new javax.swing.JPanel();
        monBack = new javax.swing.JPanel();
        thurBack = new javax.swing.JPanel();
        sunBack = new javax.swing.JPanel();
        canvas1 = new java.awt.Canvas();
        satBack = new javax.swing.JPanel();
        wedBack = new javax.swing.JPanel();
        friBack = new javax.swing.JPanel();
        refBar = new javax.swing.JPanel();
        monDate = new javax.swing.JLabel();
        tuesDate = new javax.swing.JLabel();
        wedDate = new javax.swing.JLabel();
        thurDate = new javax.swing.JLabel();
        sunDate = new javax.swing.JLabel();
        friDate = new javax.swing.JLabel();
        satDate = new javax.swing.JLabel();
        sunDay = new javax.swing.JLabel();
        monDay = new javax.swing.JLabel();
        tueDay = new javax.swing.JLabel();
        wedDay = new javax.swing.JLabel();
        thuDay = new javax.swing.JLabel();
        friDay = new javax.swing.JLabel();
        satDay = new javax.swing.JLabel();
        homeButt = new javax.swing.JButton();
        rButt = new javax.swing.JButton();
        lButt = new javax.swing.JButton();
        eventField1 = new javax.swing.JTextField();
        eventField2 = new javax.swing.JTextField();
        t2_1 = new javax.swing.JTextField();
        t2_2 = new javax.swing.JTextField();
        t2_3 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        t1_1 = new javax.swing.JTextField();
        t1_2 = new javax.swing.JTextField();
        t1_3 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        sunToggle = new javax.swing.JToggleButton();
        monToggle = new javax.swing.JToggleButton();
        wedToggle = new javax.swing.JToggleButton();
        tueToggle = new javax.swing.JToggleButton();
        thuToggle = new javax.swing.JToggleButton();
        friToggle = new javax.swing.JToggleButton();
        satToggle = new javax.swing.JToggleButton();
        weekButt = new javax.swing.JRadioButton();
        monthButt = new javax.swing.JRadioButton();
        tWeekButt = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        yellowB = new javax.swing.JToggleButton();
        blueB = new javax.swing.JToggleButton();
        redB = new javax.swing.JToggleButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(850, 600));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tueBack.setBackground(new java.awt.Color(232, 236, 239));
        tueBack.setName("tueBack"); // NOI18N

        javax.swing.GroupLayout tueBackLayout = new javax.swing.GroupLayout(tueBack);
        tueBack.setLayout(tueBackLayout);
        tueBackLayout.setHorizontalGroup(
            tueBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 96, Short.MAX_VALUE)
        );
        tueBackLayout.setVerticalGroup(
            tueBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        monBack.setBackground(new java.awt.Color(232, 236, 239));
        monBack.setName("monBack"); // NOI18N

        javax.swing.GroupLayout monBackLayout = new javax.swing.GroupLayout(monBack);
        monBack.setLayout(monBackLayout);
        monBackLayout.setHorizontalGroup(
            monBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 96, Short.MAX_VALUE)
        );
        monBackLayout.setVerticalGroup(
            monBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        thurBack.setBackground(new java.awt.Color(232, 236, 239));
        thurBack.setName("thuBack"); // NOI18N

        javax.swing.GroupLayout thurBackLayout = new javax.swing.GroupLayout(thurBack);
        thurBack.setLayout(thurBackLayout);
        thurBackLayout.setHorizontalGroup(
            thurBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 94, Short.MAX_VALUE)
        );
        thurBackLayout.setVerticalGroup(
            thurBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        sunBack.setBackground(new java.awt.Color(232, 236, 239));
        sunBack.setName("sunBack"); // NOI18N

        javax.swing.GroupLayout sunBackLayout = new javax.swing.GroupLayout(sunBack);
        sunBack.setLayout(sunBackLayout);
        sunBackLayout.setHorizontalGroup(
            sunBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sunBackLayout.createSequentialGroup()
                .addContainerGap(51, Short.MAX_VALUE)
                .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );
        sunBackLayout.setVerticalGroup(
            sunBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sunBackLayout.createSequentialGroup()
                .addGap(335, 335, 335)
                .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        satBack.setBackground(new java.awt.Color(232, 236, 239));
        satBack.setName("satBack"); // NOI18N

        javax.swing.GroupLayout satBackLayout = new javax.swing.GroupLayout(satBack);
        satBack.setLayout(satBackLayout);
        satBackLayout.setHorizontalGroup(
            satBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 97, Short.MAX_VALUE)
        );
        satBackLayout.setVerticalGroup(
            satBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        wedBack.setBackground(new java.awt.Color(232, 236, 239));
        wedBack.setName("wedBack"); // NOI18N

        javax.swing.GroupLayout wedBackLayout = new javax.swing.GroupLayout(wedBack);
        wedBack.setLayout(wedBackLayout);
        wedBackLayout.setHorizontalGroup(
            wedBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 102, Short.MAX_VALUE)
        );
        wedBackLayout.setVerticalGroup(
            wedBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 708, Short.MAX_VALUE)
        );

        friBack.setBackground(new java.awt.Color(232, 236, 239));
        friBack.setName("friBack"); // NOI18N

        javax.swing.GroupLayout friBackLayout = new javax.swing.GroupLayout(friBack);
        friBack.setLayout(friBackLayout);
        friBackLayout.setHorizontalGroup(
            friBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 91, Short.MAX_VALUE)
        );
        friBackLayout.setVerticalGroup(
            friBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        refBar.setBackground(new java.awt.Color(207, 211, 214));

        javax.swing.GroupLayout refBarLayout = new javax.swing.GroupLayout(refBar);
        refBar.setLayout(refBarLayout);
        refBarLayout.setHorizontalGroup(
            refBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );
        refBarLayout.setVerticalGroup(
            refBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        monDate.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        monDate.setForeground(new java.awt.Color(59, 63, 67));
        monDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        monDate.setText("9/6/21");

        tuesDate.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        tuesDate.setForeground(new java.awt.Color(59, 63, 67));
        tuesDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tuesDate.setText("9/7/21");

        wedDate.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        wedDate.setForeground(new java.awt.Color(59, 63, 67));
        wedDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        wedDate.setText("9/7/22");

        thurDate.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        thurDate.setForeground(new java.awt.Color(59, 63, 67));
        thurDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        thurDate.setText("9/8/22");

        sunDate.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        sunDate.setForeground(new java.awt.Color(59, 63, 67));
        sunDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sunDate.setText("9/5/21");

        friDate.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        friDate.setForeground(new java.awt.Color(59, 63, 67));
        friDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        friDate.setText("9/9/22");

        satDate.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        satDate.setForeground(new java.awt.Color(59, 63, 67));
        satDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        satDate.setText("9/10/22");

        sunDay.setForeground(new java.awt.Color(59, 63, 67));
        sunDay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sunDay.setText("sunday");

        monDay.setForeground(new java.awt.Color(59, 63, 67));
        monDay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        monDay.setText("monday");

        tueDay.setForeground(new java.awt.Color(59, 63, 67));
        tueDay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tueDay.setText("tuesday");

        wedDay.setForeground(new java.awt.Color(59, 63, 67));
        wedDay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        wedDay.setText("wednesday");

        thuDay.setForeground(new java.awt.Color(59, 63, 67));
        thuDay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        thuDay.setText("thursday");

        friDay.setForeground(new java.awt.Color(59, 63, 67));
        friDay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        friDay.setText("friday");

        satDay.setForeground(new java.awt.Color(59, 63, 67));
        satDay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        satDay.setText("saturday");

        homeButt.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        homeButt.setText("O");
        homeButt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                homeButtMouseClicked(evt);
            }
        });

        rButt.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        rButt.setText(">");
        rButt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rButtMouseClicked(evt);
            }
        });

        lButt.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        lButt.setText("<");
        lButt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lButtMouseClicked(evt);
            }
        });

        eventField1.setText("Enter your event here...");
        eventField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                eventField1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                eventField1FocusLost(evt);
            }
        });

        eventField2.setText("Event line two (optional)...");
        eventField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                eventField2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                eventField2FocusLost(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(59, 63, 67));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText(":");
        jLabel5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jLabel10FocusGained(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(111, 120, 130));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("h");
        jLabel6.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jLabel10FocusGained(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(111, 120, 130));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("m");
        jLabel7.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jLabel10FocusGained(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(111, 120, 130));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("am/pm");
        jLabel8.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jLabel10FocusGained(evt);
            }
        });

        jLabel10.setForeground(new java.awt.Color(124, 133, 143));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("end");

        jLabel9.setForeground(new java.awt.Color(124, 133, 143));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("start");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(59, 63, 67));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(":");
        jLabel1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jLabel10FocusGained(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(111, 120, 130));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("h");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(111, 120, 130));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("m");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(111, 120, 130));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("am/pm");

        sunToggle.setText("Sunday");

        monToggle.setText("Monday");

        wedToggle.setText("Wednesday");

        tueToggle.setText("Tuesday");

        thuToggle.setText("Thursday");

        friToggle.setText("Friday");

        satToggle.setText("Saturday");

        subOptions.add(weekButt);
        weekButt.setText("weekly");

        subOptions.add(monthButt);
        monthButt.setText("monthly");

        subOptions.add(tWeekButt);
        tWeekButt.setSelected(true);
        tWeekButt.setText("this week");

        jButton1.setText("add");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        colorPickerGroup.add(yellowB);
        yellowB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        yellowB.setForeground(java.awt.Color.yellow);
        yellowB.setSelected(true);
        yellowB.setText("Y");

        colorPickerGroup.add(blueB);
        blueB.setForeground(java.awt.Color.blue);
        blueB.setText("B");

        colorPickerGroup.add(redB);
        redB.setForeground(java.awt.Color.red);
        redB.setText("R");

        jButton2.setText("Refresh");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(22, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(weekButt)
                                    .addComponent(tWeekButt)
                                    .addComponent(monthButt)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                .addComponent(eventField1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lButt, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(homeButt, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(rButt, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(eventField2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(monToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sunToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(wedToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tueToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(thuToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(friToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(satToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(t2_1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(2, 2, 2)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(2, 2, 2)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(t2_2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(7, 7, 7)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(t2_3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(t1_1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(2, 2, 2)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(2, 2, 2)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(t1_2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(7, 7, 7)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(t1_3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(yellowB, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(redB, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(blueB, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(refBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(sunDate)
                    .addComponent(sunBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sunDay))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(monDate)
                    .addComponent(monBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(monDay))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(tuesDate)
                    .addComponent(tueBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tueDay))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(wedBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(wedDate)
                    .addComponent(wedDay))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(thurBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(thurDate)
                    .addComponent(thuDay))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(friDate)
                    .addComponent(friBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(friDay))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(satDate)
                    .addComponent(satBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(satDay))
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sunDay)
                            .addComponent(monDay)
                            .addComponent(tueDay)
                            .addComponent(wedDay)
                            .addComponent(thuDay)
                            .addComponent(friDay)
                            .addComponent(satDay))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(monDate)
                            .addComponent(tuesDate)
                            .addComponent(wedDate)
                            .addComponent(thurDate)
                            .addComponent(sunDate)
                            .addComponent(friDate)
                            .addComponent(satDate)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(rButt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(homeButt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lButt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(wedBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tueBack, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(friBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(thurBack, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(satBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(refBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(monBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sunBack, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(22, 22, 22))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(eventField1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eventField2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(t1_1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t1_2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t1_3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(t2_1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t2_2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t2_3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(sunToggle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(monToggle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tueToggle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wedToggle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(thuToggle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(friToggle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(satToggle)
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(yellowB, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(blueB, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(redB, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tWeekButt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(weekButt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(monthButt))
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addComponent(jButton2)
                        .addGap(33, 33, 33))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    private void jButtonMouseClicked(java.awt.event.MouseEvent evt, EvMouseListener lsnr)
    {
        // Del button pressed
        System.out.println("Deleting UUID: " + lsnr.uid);
        for (eventObject ev : eventArray)
            if (ev.getUUID().equals(lsnr.uid)) ev.kill = true;
        lsnr.blck.dispose();
        
        // Refresh view
        refreshcal();
    }
    
    public void refreshcal()
    {   
        writeToFile();
        eventArray = readFromFile();
        
        killComponents();
        parseEvents();
    }
    
    private void markToday(int dayOfWeek)
    {
        
        // TODO
        // ====
        // Code for marking the current time on the present day
        
        /* Reference code from generate function:
        
        ...
        
        // Set up military time (sort of redundant code, but whatever)
        if (!am1 && h1 != 12) stMil = (float) h1 + ( (float) m1 / 100f * 1f) + 12f;
        else if (am1 && h1 == 12) stMil = 0;
        else stMil = (float) h1 + ( (float) m1 / 100f * 1f);
        //---//
        if (!am2 && h2 != 12) etMil = (float) h2 + ( (float) m2 / 100f * 1f) + 12f;
        else if (am2 && h2 == 12) etMil = 0;
        else etMil = (float) h2 + ( (float) m2 / 100f * 1f);
        
        // Generic code for generating height/position
        int backHeight = sunBack.getHeight(); // Generic height
        float height = ((float)backHeight / 23.55f)*(etMil - stMil);
        float distance = ((((float) backHeight / 23.55f) * stMil));
        // 23.55f is the magic number for displaying correctly, apparently
        
        ...
        
        switch (parentDay)
        {
            case 1:
                // System.out.println("New event for sunday");
                Canvas eventSun = new Canvas();
                eventSun.setVisible(false);
                eventSun.setSize(new Dimension(sunBack.getBounds().width, (int) height));
                eventSun.setLocation(0, (int) distance);
                eventSun.setBackground(c);
                eventSun.addMouseListener(new EvMouseListener(parentDay, h1, m1, h2, m2, am1, am2, r, e, c)); // Listener
                sunBack.add(eventSun);
                generateOverlaps(parentDay);
                eventSun.setVisible(true);
                break;
        
        ...
        
        */
        
        switch(dayOfWeek)
        {
            case 1:
                break;
            case 2:
                break;
            case 3:
                break;
            case 4:
                break;
            case 5:
                break;
            case 6:
                break;
            case 7:
                break;
        }
    }
    
    // Generates values for week based on given date
    // Works with any day from a given week (sun-sat)
    private void updateCalendar(Date ltoday)
    {
        // Sets initial selected value
        selectedDate = ltoday;
        
        // Makes calendar
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(ltoday);
        
        // Sets current day var
        currentDay = calendar.get(Calendar.DAY_OF_WEEK);
        int buffer = 0;
        
        // Iterates through week (sun-sat)
        int iter = 1;
        do
        {
            // Gets offset for date function
            buffer = iter - currentDay;
            switch (iter)
            {
                case 1:
                    calendar.add(Calendar.DAY_OF_MONTH, buffer);
                    sunDate.setText((calendar.get(Calendar.MONTH) + 1) + "/" + calendar.get(Calendar.DATE) + "/" + calendar.get(Calendar.YEAR));
                    calendar.setTime(ltoday);
                    if (buffer == 0 && selectedDate == today) markToday(iter);
                    break;
                case 2:
                    calendar.add(Calendar.DAY_OF_MONTH, buffer);
                    monDate.setText((calendar.get(Calendar.MONTH) + 1) + "/" + calendar.get(Calendar.DATE) + "/" + calendar.get(Calendar.YEAR));
                    calendar.setTime(ltoday);
                    if (buffer == 0 && selectedDate == today) markToday(iter);
                    break;
                case 3:
                    calendar.add(Calendar.DAY_OF_MONTH, buffer);
                    tuesDate.setText((calendar.get(Calendar.MONTH) + 1) + "/" + calendar.get(Calendar.DATE) + "/" + calendar.get(Calendar.YEAR));
                    calendar.setTime(ltoday);
                    if (buffer == 0 && selectedDate == today) markToday(iter);
                    break;
                case 4:
                    calendar.add(Calendar.DAY_OF_MONTH, buffer);
                    wedDate.setText((calendar.get(Calendar.MONTH) + 1) + "/" + calendar.get(Calendar.DATE) + "/" + calendar.get(Calendar.YEAR));
                    calendar.setTime(ltoday);
                    if (buffer == 0 && selectedDate == today) markToday(iter);
                    break;
                case 5:
                    calendar.add(Calendar.DAY_OF_MONTH, buffer);
                    thurDate.setText((calendar.get(Calendar.MONTH) + 1) + "/" + calendar.get(Calendar.DATE) + "/" + calendar.get(Calendar.YEAR));
                    calendar.setTime(ltoday);
                    if (buffer == 0 && selectedDate == today) markToday(iter);
                    break;
                case 6:
                    calendar.add(Calendar.DAY_OF_MONTH, buffer);
                    friDate.setText((calendar.get(Calendar.MONTH) + 1) + "/" + calendar.get(Calendar.DATE) + "/" + calendar.get(Calendar.YEAR));
                    calendar.setTime(ltoday);
                    if (buffer == 0 && selectedDate == today) markToday(iter);
                    break;
                case 7:
                    calendar.add(Calendar.DAY_OF_MONTH, buffer);
                    satDate.setText((calendar.get(Calendar.MONTH) + 1) + "/" + calendar.get(Calendar.DATE) + "/" + calendar.get(Calendar.YEAR));
                    calendar.setTime(ltoday);
                    if (buffer == 0 && selectedDate == today) markToday(iter);
                    break;
            }
            iter++;
        }
        while (iter <= 7);
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Sets initial calender dates
        updateCalendar(today);
        parseEvents();
        writeToFile(); // Kills deprecated events
    }//GEN-LAST:event_formWindowOpened

    private void homeButtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeButtMouseClicked
        // Reset calendar view
        
        // Does nothing if already at current date
        if (today.getTime() == selectedDate.getTime()) return;
        
        selectedDate = today;
        updateCalendar(today);
        
        killComponents();
        parseEvents();
    }//GEN-LAST:event_homeButtMouseClicked

    private void rButtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rButtMouseClicked
        // Moves calendar forward a week
        Date curr = selectedDate;
        Calendar cal = Calendar.getInstance();
        cal.setTime(curr);
        
        // Moves to next week
        cal.add(Calendar.DAY_OF_MONTH, 7);
        
        selectedDate = cal.getTime();
        updateCalendar(selectedDate);
        
        killComponents();
        parseEvents();
    }//GEN-LAST:event_rButtMouseClicked

    private void lButtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lButtMouseClicked
        // Moves calendar back a week
        Date curr = selectedDate;
        
        // Doesn't go back past current date
        if (today.getTime() == curr.getTime()) return;
        
        Calendar cal = Calendar.getInstance();
        cal.setTime(curr);
        
        // Moves to prev week
        cal.add(Calendar.DAY_OF_MONTH, -7);
        
        selectedDate = cal.getTime();
        updateCalendar(selectedDate);
        
        killComponents();
        parseEvents();
    }//GEN-LAST:event_lButtMouseClicked

    private void eventField1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_eventField1FocusGained
        String text = eventField1.getText();
        if (text.equals("Enter your event here...")) eventField1.setText(""); // Clears default text
    }//GEN-LAST:event_eventField1FocusGained

    private void eventField2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_eventField2FocusGained
        String text = eventField2.getText();
        if (text.equals("Event line two (optional)...")) eventField2.setText(""); // Clears default text
    }//GEN-LAST:event_eventField2FocusGained

    private void eventField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_eventField1FocusLost
        String text = eventField1.getText();
        if (text.trim().equals("")) eventField1.setText("Enter your event here..."); // Restores default text
    }//GEN-LAST:event_eventField1FocusLost

    private void eventField2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_eventField2FocusLost
        String text = eventField2.getText();
        if (text.trim().equals("")) eventField2.setText("Event line two (optional)..."); // Restores default text
    }//GEN-LAST:event_eventField2FocusLost

    private String[] splitTime(String tme)
    {
        // Splits time field of eventObject for use elsewhere
        return tme.split(" ");
    }
    
    private Color stringToColor(String clr)
    {
        Color convColor;     
        switch(clr.toLowerCase())
        {
            case "blue":
                convColor = Color.BLUE;
                break;
            case "red":
                convColor = Color.RED;
                break;
            default:
                convColor = Color.YELLOW;
                break;
        }   
        return convColor;
    }
    
    private boolean isAfter(String date1, String date2, boolean ignoreYear) {
        // For checking if a date(2) is past (or at) the start date(1)
        
        // Splits date-string and grabs component pieces
        String[] dateArr1 = date1.split("/");
        int day1    = Integer.parseInt(dateArr1[1]);
        int month1  = Integer.parseInt(dateArr1[0]);
        int year1   = Integer.parseInt(dateArr1[2]);
        //---//
        String[] dateArr2 = date2.split("/");
        int day2    = Integer.parseInt(dateArr2[1]);
        int month2  = Integer.parseInt(dateArr2[0]);
        int year2   = Integer.parseInt(dateArr2[2]);
        
        // Checks by year, month, then day
        if (!ignoreYear)
        {
            if (year2 > year1) return true;
            else if (year2 == year1 && month2 > month1) return true;
            else return year2 == year1 && month2 == month1 && (day2 > day1 || day2 == day1);
        }
        // For use with monthly recurrence
        else return (month2 == month1 || month2 > month1) && day2 == day1;
    }
    
    private boolean isInWeek(String date1, String date2) {
        // Checks if a date is within the week of a startDate
        // Specifically for non-recurrence cases
        
        // Splits date-string and grabs component pieces
        String[] dateArr1 = date1.split("/");
        int day1    = Integer.parseInt(dateArr1[0]);
        int month1  = Integer.parseInt(dateArr1[1]);
        int year1   = Integer.parseInt(dateArr1[2]);
        //---//
        String[] dateArr2 = date2.split("/");
        int day2    = Integer.parseInt(dateArr2[0]);
        int month2  = Integer.parseInt(dateArr2[1]);
        int year2   = Integer.parseInt(dateArr2[2]);
        
        return year2 == year1 && month2 == month1 && day2 == day1;
    }
    
    private boolean isBefore(String date1, String date2) {
        // Checks if a date is within the week of a startDate
        // Specifically for non-recurrence cases
        
        // Splits date-string and grabs component pieces
        String[] dateArr1 = date1.split("/");
        int day1    = Integer.parseInt(dateArr1[0]);
        int month1  = Integer.parseInt(dateArr1[1]);
        int year1   = Integer.parseInt(dateArr1[2]);
        //---//
        String[] dateArr2 = date2.split("/");
        int day2    = Integer.parseInt(dateArr2[0]);
        int month2  = Integer.parseInt(dateArr2[1]);
        int year2   = Integer.parseInt(dateArr2[2]);
        
        // Returns if date 1 is before date 2 (date 1 has passed)
        return year2 > year1 || month2 > month1 || (month2 == month1 && day2 > day1);
    }
    
    private void parseEvents() {
        // Function that searches eventArray for relevant events
     
        // Array to hold date-strings for checking
        String[] checkDates = new String[7];
        
        // Array populated from displayed dates
        // (No need to re-calculate)
        checkDates[0] = sunDate.getText();
        checkDates[1] = monDate.getText();
        checkDates[2] = tuesDate.getText();
        checkDates[3] = wedDate.getText();
        checkDates[4] = thurDate.getText();
        checkDates[5] = friDate.getText();
        checkDates[6] = satDate.getText();
        
        for (int i = 0; i < 7; i++)
        {
            // System.out.println("Checking day " + (i + 1) + "... ");
            // Checks every checkdate against every event
            if (eventArray == null) return;
            for (eventObject e : eventArray)
            {
                // Makes sure it's even worth checking the event any further
                if (isAfter(e.getsDate(), checkDates[i], false))
                {
                    // Check for recurrence
                    switch(e.getRecurr().toLowerCase())
                    {
                        case "none":
                            // Checks event is in relevant week
                            if (isInWeek(e.getsDate(), checkDates[0]))
                            {
                                // Breaks into individual cases
                                for (String sN : e.getdOfTheW().split(" "))
                                {
                                    // Only cares if we're checking the specific day
                                    // Comes back later if not applicable
                                    if (Integer.parseInt(sN) == (i + 1))
                                    {
                                        // System.out.println("Generating event at day " + (i + 1));
                                        String[] sTme = splitTime(e.getsTime());
                                        String[] eTme = splitTime(e.geteTime());
                                        generateEvent( // Generates event(s)
                                            i + 1,                              // Parent day
                                            Integer.parseInt(sTme[0]),          // Start hours
                                            Integer.parseInt(sTme[1]),          // Start minutes
                                            Integer.parseInt(eTme[0]),          // End hours
                                            Integer.parseInt(eTme[1]),          // End minutes
                                            sTme[2].equals("am"),               // Start am bool
                                            eTme[2].equals("am"),               // End am bool
                                            new boolean[]{true, false, false},  // Repetition type
                                            new String[]{e.gete1(), e.gete2()}, // Events line 1/2
                                            stringToColor(e.getColor()),        // Color to be used
                                            e.getUUID());                       // Index
                                    }
                                }
                            }
                            // Checks if event has passed
                            else if (isBefore(e.getsDate(), checkDates[0]))
                            {
                                e.kill = true;
                            }
                            break;
                        case "weekly":
                            for (String sW : e.getdOfTheW().split(" "))
                            {
                                // System.out.println("Does " + Integer.parseInt(sW) + " = " + (i + 1));
                                if (Integer.parseInt(sW) == (i + 1))
                                {
                                    // System.out.println("Generating event at day " + (i + 1));
                                    String[] sTme = splitTime(e.getsTime());
                                    String[] eTme = splitTime(e.geteTime());
                                    generateEvent( // Generates event(s)
                                        i + 1,                              // Parent day
                                        Integer.parseInt(sTme[0]),          // Start hours
                                        Integer.parseInt(sTme[1]),          // Start minutes
                                        Integer.parseInt(eTme[0]),          // End hours
                                        Integer.parseInt(eTme[1]),          // End minutes
                                        sTme[2].equals("am"),               // Start am bool
                                        eTme[2].equals("am"),               // End am bool
                                        new boolean[]{false, true, false},  // Repetition type
                                        new String[]{e.gete1(), e.gete2()}, // Events line 1/2
                                        stringToColor(e.getColor()),        // Color to be used
                                        e.getUUID());                       // Index
                                }
                            }
                            break;
                        case "monthly":
                            for (String sM : e.getdOfTheW().split(" "))
                            {   
                                // Checks day of month against days for event
                                if (Integer.parseInt(sM) == Integer.parseInt(checkDates[i].split("/")[1]))
                                {
                                    // System.out.println("Generating event at day " + (i + 1));
                                    String[] sTme = splitTime(e.getsTime());
                                    String[] eTme = splitTime(e.geteTime());
                                    generateEvent( // Generates event(s)
                                        i + 1,                              // Parent day
                                        Integer.parseInt(sTme[0]),          // Start hours
                                        Integer.parseInt(sTme[1]),          // Start minutes
                                        Integer.parseInt(eTme[0]),          // End hours
                                        Integer.parseInt(eTme[1]),          // End minutes
                                        sTme[2].equals("am"),               // Start am bool
                                        eTme[2].equals("am"),               // End am bool
                                        new boolean[]{false, false, true},  // Repetition type
                                        new String[]{e.gete1(), e.gete2()}, // Events line 1/2
                                        stringToColor(e.getColor()),        // Color to be used
                                        e.getUUID());                       // Index
                                }
                            }
                            break;
                        default:
                            System.out.println("Err: failture to categorize!");
                            break;
                    }
                }
            }
        }
        // System.out.println("Done!");
    }
    
    private void logEvent(String rc, String sd, String sT, String eT, String e1, String e2, String dotw, String color) {
        // For logging events/dates to global event array
        
        int len;
        if (eventArray != null) len = eventArray.length;
        else len = 0;
        
        eventObject[] newArr = new eventObject[len + 1];
        
        // Moves everything to new array
        int j = 0;
        if (eventArray != null)
        {
            for (eventObject i : eventArray)
            {
                newArr[j] = eventArray[j];
                j++;
            }
        }
        // Unique UUID
        UUID uniqueKey = UUID.randomUUID();
        
        newArr[j] = new eventObject(rc, sd, sT, eT, e1, e2, dotw, color, uniqueKey.toString());
        newArr[j].inx = j; // Set event index param
        eventArray = newArr;
        
        // Saves new events automatically
        writeToFile();
    }
    
    private void writeToFile() {
        // For writing to txt before close
        try {
            FileWriter fw = new FileWriter("schedule.txt");
            String writeMe = "";
            for (eventObject ev : eventArray)
            {
                if (!ev.kill)
                {
                    writeMe += "0\n";
                    writeMe += ev.getRecurr() + "\n";
                    writeMe += ev.getsDate()+ "\n";
                    writeMe += ev.getsTime() + "\n";
                    writeMe += ev.geteTime() + "\n";
                    writeMe += ev.gete1() + "\n";
                    if (ev.gete2() == null) writeMe += "empty\n";
                    else writeMe += ev.gete2() + "\n";
                    writeMe += ev.getdOfTheW()+ "\n";
                    writeMe += ev.getColor() + "\n";
                    writeMe += ev.getUUID() + "\n";
                }
            }
            fw.write(writeMe);
            fw.close();
        }
        catch (IOException e) {System.out.println("Err: Write error");}
    }
    
    private eventObject[] readFromFile() {
        // For reading from txt
        
        // Buffer variables
        String r = "";
        String st = "";
        String tm1 = "";
        String tm2 = "";
        String e1 = "";
        String e2 = "";
        String dow = "";
        String clr = "";
        String uuid = "";
        
        try
        {
            // Reads file
            java.util.List<String> lines;
            lines = Files.readAllLines(Paths.get("schedule.txt"));
            
            if (lines.size() < 10) return null;
            
            // Makes array sized based on number of events
            int numOfEvents = 0;
            for (String ln : lines) {if (ln.equals("0")) numOfEvents++;}
            eventObject[] evArr = new eventObject[numOfEvents];
            
            int i = -1; // Tracks array index   
            int j = 0;  // Tracks loop iterations
            for (String line : lines)
            {
                // Trims line
                String trimmed = line.trim();
                
                // Assigns line to correct var based on j
                switch(j) {
                    case 1:
                        r = trimmed;
                        break;
                    case 2:
                        st = trimmed;
                        break;
                    case 3:
                        tm1 = trimmed;
                        break;
                    case 4:
                        tm2 = trimmed;
                        break;
                    case 5:
                        e1 = trimmed;
                        break;
                    case 6:
                        e2 = trimmed;
                        break;
                    case 7:
                        dow = trimmed;
                        break;
                    case 8:
                        clr = trimmed;
                        break;
                    case 9:
                        uuid = trimmed;
                        break;
                }
                
                if (j == 9)
                {
                    evArr[i] = new eventObject(r, st, tm1, tm2, e1, e2, dow, clr, uuid);
                    evArr[i].inx = i; // Set event index param
                }
                j++;
                
                // Detects beginning of new event, loop ends otherwise
                if (trimmed.equals("0"))
                {
                    i++;    // Moves through array
                    j = 1;  // Resets iteration count
                }
            }
            
            return evArr;
        }
        catch(IOException e_1)
        {
            System.out.println("Unable to locate schedule.txt");
            // Makes new file if one doesn't exist
            try {
                FileWriter makeFile = new FileWriter("schedule.txt");
                makeFile.close();
                System.out.println("schedule.txt created");
            }
            catch(IOException e_2)
            {
                System.out.println("Err: Give up");
                return null;
            }
            return readFromFile(); // Tries again
        }
    }
    
    private void clearFields() {
        // Clears all user fields once a block(s) is input
        
        // Clears event description(s)
        eventField1.setText(def1);
        eventField2.setText(def2);
        
        // Clears start time 
        t1_1.setText("");
        t1_2.setText("");
        t1_3.setText("");
        
        // Clears end time
        t2_1.setText("");
        t2_2.setText("");
        t2_3.setText("");
        
        // Clears day selections
        sunToggle.setSelected(false);
        monToggle.setSelected(false);
        tueToggle.setSelected(false);
        wedToggle.setSelected(false);
        thuToggle.setSelected(false);
        friToggle.setSelected(false);
        satToggle.setSelected(false);
    }
    
    private void killComponents() {
        // Removes currently loaded event blocks
        
        sunBack.removeAll();
        monBack.removeAll();
        tueBack.removeAll();
        wedBack.removeAll();
        thurBack.removeAll();
        friBack.removeAll();
        satBack.removeAll();
    }
    
    private Color colorBlend(Color a, Color b) {
        // Blends two colors from intersecting canvases
        
        /* TODO:
        REPLACE THIS SHIT WITH SWITCH STATEMENTS
        like really, why did I think this was a good idea
        */
        
        if (a.toString().equals(Color.YELLOW.toString()) && b.toString().equals(Color.RED.toString())) return Color.ORANGE;
        if (a.toString().equals(Color.BLUE.toString()) && b.toString().equals(Color.RED.toString())) return Color.MAGENTA.darker();
        if (a.toString().equals(Color.BLUE.toString()) && b.toString().equals(Color.YELLOW.toString())) return Color.GREEN.darker();
        
        if (b.toString().equals(Color.YELLOW.toString()) && a.toString().equals(Color.RED.toString())) return Color.ORANGE;
        if (b.toString().equals(Color.BLUE.toString()) && a.toString().equals(Color.RED.toString())) return Color.MAGENTA.darker();
        if (b.toString().equals(Color.BLUE.toString()) && a.toString().equals(Color.YELLOW.toString())) return Color.GREEN.darker();
        
        System.out.println("Err: Color blend error");
        System.out.println(a.toString() + " + " + b.toString());
        return Color.YELLOW;
    }
    
    private void generateOverlaps(int day) {
        // Generates overlapping sections
        
        int cc;     // Generic variable for component count
        int cc2;    // Generic variable for 2nd component count
        JPanel cnv; // Panel to be checked
        
        switch (day)
        {
            case 1:
                cnv = sunBack;
                break;
            case 2:
                cnv = monBack;
                break;
            case 3:
                cnv = tueBack;
                break;
            case 4:
                cnv = wedBack;
                break;
            case 5:
                cnv = thurBack;
                break;
            case 6: 
                cnv = friBack;
                break;
            case 7:
                cnv = satBack;
                break;
            default:
                cnv = sunBack;
                System.out.println("Err: Generate overlaps failed");
                break;
        }
        
        int compCount = cnv.getComponentCount(); // Non-moving number in case components are added
        for (cc = 0; cc < compCount; cc++)
        {
            // System.out.println("Outer-loop");
            for (cc2 = cc + 1; cc2 < compCount; cc2++)
            {         
                // System.out.println("Inner-loop");
                if (cc2 >= compCount) return;
                
                // Compares each rectangle to ever other rectangle for intersections (excludes overlap rectangles)
                if (cnv.getComponent(cc).getBounds().intersects(cnv.getComponent(cc2).getBounds()) 
                        && !cnv.getComponent(cc2).getName().equals("overlap")
                        && !cnv.getComponent(cc).getName().equals("overlap"))
                {
                    Rectangle inter = cnv.getComponent(cc).getBounds().intersection(cnv.getComponent(cc2).getBounds());
                    Canvas ovr = new Canvas();
                    ovr.setVisible(false);
                    ovr.setBounds(inter);
                    ovr.setLocation(inter.x, inter.y);
                    ovr.setName("overlap");
                    ovr.setBackground(colorBlend(cnv.getComponent(cc).getBackground(), cnv.getComponent(cc2).getBackground()));
                    cnv.add(ovr, 0);
                    cnv.revalidate(); // Somehow works holy shit
                    ovr.setVisible(true); // Fixes flashing issue
                }
            }
        }
        // System.out.println("Loops exited");
    }
    
    private void generateEvent(int parentDay, int h1, int m1, int h2, int m2,
            boolean am1, boolean am2, boolean[] r, String[] e, Color c, String uuid) {
        // Function for generating schedule items.
        // Takes day of the week (1-7), start h:m, end h:m, start am/pm, end am/pm,
        // boolean array to convey recurrence, & string array of event description.
        
        // System.out.println("Generate function entered");
        
        // Helpers
        float stMil;                // Start time (military)
        float etMil;                // End time (military)
        boolean thw     = r[0];     // This week
        boolean wly     = r[1];     // Weekly
        boolean mly     = r[2];     // Monthly
        String ev1      = e[0];     // Event line 1
        String ev2      = e[1];     // Event line 2
        String uuID     = uuid;     // Unique identifier for non-static use
        
        // Set up military time (sort of redundant code, but whatever)
        if (!am1 && h1 != 12) stMil = (float) h1 + ( (float) m1 / 100f * 1f) + 12f;
        else if (am1 && h1 == 12) stMil = 0;
        else stMil = (float) h1 + ( (float) m1 / 100f * 1f);
        //---//
        if (!am2 && h2 != 12) etMil = (float) h2 + ( (float) m2 / 100f * 1f) + 12f;
        else if (am2 && h2 == 12) etMil = 0;
        else etMil = (float) h2 + ( (float) m2 / 100f * 1f);
        
        // Generic code for generating height/position
        int backHeight = sunBack.getHeight(); // Generic height
        float height = ((float)backHeight / 23.55f)*(etMil - stMil);
        float distance = ((((float) backHeight / 23.55f) * stMil));
        // 23.55f is the magic number for displaying correctly, apparently
        
        // Generate block & listener for block
        EvMouseListener lsn = new EvMouseListener(parentDay, h1, m1, h2, m2, am1, am2, r, e , c, uuID);
        lsn.blck.getB1().addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonMouseClicked(evt, lsn);
            }
        });
        switch (parentDay)
        {
            case 1:
                // System.out.println("New event for sunday");
                Canvas eventSun = new Canvas();
                eventSun.setVisible(false);
                eventSun.setSize(new Dimension(sunBack.getBounds().width, (int) height));
                eventSun.setLocation(0, (int) distance);
                eventSun.setBackground(c);
                eventSun.addMouseListener(lsn); // Listener
                sunBack.add(eventSun);
                generateOverlaps(parentDay);
                eventSun.setVisible(true);
                break;
            case 2:
                // System.out.println("New event for monday");
                Canvas eventMon = new Canvas();
                eventMon.setVisible(false);
                eventMon.setSize(new Dimension(monBack.getBounds().width, (int) height));
                eventMon.setLocation(0, (int) distance);
                eventMon.setBackground(c);
                eventMon.addMouseListener(lsn); // Listener
                monBack.add(eventMon);
                generateOverlaps(parentDay);
                eventMon.setVisible(true);
                break;
            case 3:
                // System.out.println("New event for tuesday");
                Canvas eventTue = new Canvas();
                eventTue.setVisible(false);
                eventTue.setSize(new Dimension(tueBack.getBounds().width, (int) height));
                eventTue.setLocation(0, (int) distance);
                eventTue.setBackground(c);
                eventTue.addMouseListener(lsn); // Listener
                tueBack.add(eventTue);
                generateOverlaps(parentDay);
                eventTue.setVisible(true);
                break;
            case 4:
                // System.out.println("New event for wednesday");
                Canvas eventWed = new Canvas();
                eventWed.setVisible(false);
                eventWed.setSize(new Dimension(wedBack.getBounds().width, (int) height));
                eventWed.setLocation(0, (int) distance);
                eventWed.setBackground(c);
                eventWed.addMouseListener(lsn); // Listener
                wedBack.add(eventWed);
                generateOverlaps(parentDay);
                eventWed.setVisible(true);
                break;
            case 5:
                // System.out.println("New event for thursday");
                Canvas eventThu = new Canvas();
                eventThu.setVisible(false);
                eventThu.setSize(new Dimension(thurBack.getBounds().width, (int) height));
                eventThu.setLocation(0, (int) distance);
                eventThu.setBackground(c);
                eventThu.addMouseListener(lsn); // Listener
                thurBack.add(eventThu);
                generateOverlaps(parentDay);
                eventThu.setVisible(true);
                break;
            case 6:
                // System.out.println("New event for friday");
                Canvas eventFri = new Canvas();
                eventFri.setVisible(false);
                eventFri.setSize(new Dimension(friBack.getBounds().width, (int) height));
                eventFri.setLocation(0, (int) distance);
                eventFri.setBackground(c);
                eventFri.addMouseListener(lsn); // Listener
                friBack.add(eventFri);
                generateOverlaps(parentDay);
                eventFri.setVisible(true);
                break;
            case 7:
                // System.out.println("New event for saturday");
                Canvas eventSat = new Canvas();
                eventSat.setVisible(false);
                eventSat.setSize(new Dimension(satBack.getBounds().width, (int) height));
                eventSat.setLocation(0, (int) distance);
                eventSat.setBackground(c);
                eventSat.addMouseListener(lsn); // Listener
                satBack.add(eventSat);
                generateOverlaps(parentDay);
                eventSat.setVisible(true);
                break;
        }
        
        // TODO:
        // Method for checking overlaps 
        // (satBack.getComponents[], getBounds().something about overlap)
        //
        // Needs to work universally with loading function
    }
    
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // Function for entering new event!
        // Don't mess this one up
        
        // Helper variables
        boolean am1;                        // Boolean to identify am/pm
        boolean am2;                        // -
        boolean hasSelection    = false;    // Indicates >= 1 selection
        boolean thisWeek        = false;    // Recurrence
        boolean weekly          = false;    // -
        boolean monthly         = false;    // -
        float sVal;                         // Start value for calculation check
        float eVal;                         // End value -
        Color chosenColor;                  // Users desired color
        
        // Event info
        String ev1 = eventField1.getText();
        String ev2 = eventField2.getText();
        
        if (ev2.equals(def2)) ev2 = "empty";
        
        // Start time
        int st1 = 0;
        int st2 = 0;
        String st3 = "";
        try
        {
            st1 = Integer.parseInt(t1_1.getText()); // Hours
            st2 = Integer.parseInt(t1_2.getText()); // Minutes
            st3 = t1_3.getText().toLowerCase();     // AM/PM
            if (st3.equals(def1)) st3 = "";
        }
        catch (NumberFormatException e) 
        {
            System.out.println("Err: Number format exception");
            return;
        }                                           // To handle ""
        
        
        // End time
        int et1 = 0;
        int et2 = 0;
        String et3 = "";
        try
        {
            et1 = Integer.parseInt(t2_1.getText()); // Hours
            et2 = Integer.parseInt(t2_2.getText()); // Minutes
            et3 = t2_3.getText().toLowerCase();     // AM/PM
            if (et3.equals(def2)) et3 = "";
        }
        catch (NumberFormatException e) 
        {
            System.out.println("Err: Number format exception");
            return;
        }                                           // To handle ""
        
        // Days effected
        boolean st = sunToggle.isSelected();
        boolean m = monToggle.isSelected();
        boolean t = tueToggle.isSelected();
        boolean w = wedToggle.isSelected();
        boolean r = thuToggle.isSelected();
        boolean f = friToggle.isSelected();
        boolean sn = satToggle.isSelected();
        boolean[] selected = {st, m, t, w, r, f, sn};
        
        boolean[] clrs = {yellowB.isSelected(),
                        redB.isSelected(),
                        blueB.isSelected()};
        
        int tracker = 1;
        for (boolean val: clrs)
        {
            if (val) break;
            tracker++;
        }
        
        String clr;
        // Color picker
        switch(tracker)
        {
            case 1:
                chosenColor = Color.YELLOW;
                clr = "yellow";
                break;
            case 2:
                chosenColor = Color.RED;
                clr = "red";
                break;
            case 3:
                chosenColor = Color.BLUE;
                clr = "blue";
                break;
            default:
                chosenColor = Color.YELLOW;
                clr = "yellow";
                break;
        }
        
        // Recurrence
        if (tWeekButt.isSelected()) thisWeek = true;
        else if (weekButt.isSelected()) weekly = true;
        else if (monthButt.isSelected()) monthly = true;
        
        // Checks
        if (ev1.trim().equals("")) 
        {
            System.out.println("Err: Empty event");
            return;
        }                           // No empty string for line 1
        String[] ev = {ev1, ev2};
        //---//
        if (st1 > 12 || st1 < 1) 
        {
            System.out.println("Err: Invalid start hour");
            return;
        }                           // To be replaced with handler later
        if (et1 > 12 || et1 < 1) 
        {
            System.out.println("Err: Invalid end hour");
            return;
        }                           //        
        if (st2 > 60 || st2 < 0) 
        {
            System.out.println("Err: Invalid start minute");
            return;
        }                           // Ensures numbers are within
        if (et2 > 60 || et2 < 0) 
        {
            System.out.println("Err: Invalid end minute");
            return;
        }                           // acceptable ranges
        //---//
        switch(st3)
        {
            case "am":
                am1 = true;
                break;
            case "pm":
                am1 = false;
                break;
            default:
                System.out.println("Err: AM/PM error");
                return;
        }
        switch(et3)
        {
            case "am":
                am2 = true;
                break;
            case "pm":
                am2 = false;
                break;
            default:
                System.out.println("Err: AM/PM error");
                return;
        }                    
        //---//
        for (boolean value : selected)
        {
            if (value) 
            {
                hasSelection = true;
                break;
            }
        }
        if (!hasSelection) // Ensures the user selects a day
        {
            System.out.println("Err: No selection");
            return;
        }
        
        // Check for possible span (converts to military time)
        if (!am1 && st1 != 12) sVal = (float) st1 + ( (float) st2 / 100f * 1f) + 12f;
        else if (am1 && st1 == 12) sVal = 0;
        else sVal = (float) st1 + ( (float) st2 / 100f * 1f);
        //---//
        if (!am2 && et1 != 12) eVal = (float) et1 + ( (float) et2 / 100f * 1f) + 12f;
        else if (am2 && et1 == 12) eVal = 0;
        else eVal = (float) et1 + ( (float) et2 / 100f * 1f);
        //---//
        if ((eVal - sVal) <= 0) 
        {
            System.out.println("Err: Invalid timeframe");
            return;
        }
        
        /* Deprecated (hopefully)
        // Event creation
        int i = 1;
        boolean[] recurrence = {thisWeek, weekly, monthly};
        for (boolean d : selected)
        {
            // Generates block for each selected day
            if (d) generateEvent(i, st1, st2, et1, et2, am1, am2, recurrence, ev, chosenColor);
            i++;
        }
        */
        
        String rec = "none";
        if (thisWeek) rec = "none";
        if (weekly) rec = "weekly";
        if (monthly) rec = "monthly";
        
        String dotw = "";
        if (thisWeek || weekly)
        {
            for (int k = 1; k < 8; k++)
            {
                if (selected[k-1]) dotw += k + " ";
            }
            dotw = dotw.trim();
        }
        else
        {
            for (int k = 1; k < 8; k++)
            {
                if (selected[k-1])
                {
                    switch(k)
                    {
                        case 1:
                            dotw += sunDate.getText().split("/")[1] + " ";
                            break;
                        case 2:
                            dotw += monDate.getText().split("/")[1] + " ";
                            break;
                        case 3:
                            dotw += tuesDate.getText().split("/")[1] + " ";
                            break;
                        case 4:
                            dotw += wedDate.getText().split("/")[1] + " ";
                            break;
                        case 5:
                            dotw += thurDate.getText().split("/")[1] + " ";
                            break;
                        case 6:
                            dotw += friDate.getText().split("/")[1] + " ";
                            break;
                        case 7:
                            dotw += satDate.getText().split("/")[1] + " ";
                            break;
                        default:
                            System.out.println("Err: Monthly dotw error");
                            break;
                    }
                }
            }
            dotw = dotw.trim();
        }
        
        logEvent(
            rec,                            // Recurrence
            sunDate.getText(),              // Start date
            st1 + " " + st2 + " " + st3,    // Start time
            et1 + " " + et2 + " " + et3,    // End time
            ev1,                            // Event line one
            ev2,                            // Event line two
            dotw,                           // Days of the week
            clr);                           // Color (string)
        
        // Clears text fields & selections upon successful event enter
        clearFields();
        
        // New method for update
        killComponents();
        parseEvents();
    }//GEN-LAST:event_jButton1MouseClicked

    private void jLabel10FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jLabel10FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel10FocusGained

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // Refresh view
        refreshcal();
    }//GEN-LAST:event_jButton2MouseClicked
  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(scheduleApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(scheduleApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(scheduleApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(scheduleApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new scheduleApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton blueB;
    private java.awt.Canvas canvas1;
    private javax.swing.ButtonGroup colorPickerGroup;
    private javax.swing.JTextField eventField1;
    private javax.swing.JTextField eventField2;
    private javax.swing.JPanel friBack;
    private javax.swing.JLabel friDate;
    private javax.swing.JLabel friDay;
    private javax.swing.JToggleButton friToggle;
    private javax.swing.JButton homeButt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton lButt;
    private javax.swing.JPanel monBack;
    private javax.swing.JLabel monDate;
    private javax.swing.JLabel monDay;
    private javax.swing.JToggleButton monToggle;
    private javax.swing.JRadioButton monthButt;
    private javax.swing.JButton rButt;
    private javax.swing.JToggleButton redB;
    private javax.swing.JPanel refBar;
    private javax.swing.JPanel satBack;
    private javax.swing.JLabel satDate;
    private javax.swing.JLabel satDay;
    private javax.swing.JToggleButton satToggle;
    private javax.swing.ButtonGroup subOptions;
    private javax.swing.JPanel sunBack;
    private javax.swing.JLabel sunDate;
    private javax.swing.JLabel sunDay;
    private javax.swing.JToggleButton sunToggle;
    private javax.swing.JTextField t1_1;
    private javax.swing.JTextField t1_2;
    private javax.swing.JTextField t1_3;
    private javax.swing.JTextField t2_1;
    private javax.swing.JTextField t2_2;
    private javax.swing.JTextField t2_3;
    private javax.swing.JRadioButton tWeekButt;
    private javax.swing.JLabel thuDay;
    private javax.swing.JToggleButton thuToggle;
    private javax.swing.JPanel thurBack;
    private javax.swing.JLabel thurDate;
    private javax.swing.JPanel tueBack;
    private javax.swing.JLabel tueDay;
    private javax.swing.JToggleButton tueToggle;
    private javax.swing.JLabel tuesDate;
    private javax.swing.JPanel wedBack;
    private javax.swing.JLabel wedDate;
    private javax.swing.JLabel wedDay;
    private javax.swing.JToggleButton wedToggle;
    private javax.swing.JRadioButton weekButt;
    private javax.swing.JToggleButton yellowB;
    // End of variables declaration//GEN-END:variables
}
